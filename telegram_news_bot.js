// bot.js
const https = require('https');
const { XMLParser } = require('fast-xml-parser');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  rssFeeds: [
    'https://rss.nytimes.com/services/xml/rss/nyt/Economy.xml',
    'https://www.thenation.com/subject/politics/feed/',
    'https://moxie.foxnews.com/google-publisher/politics.xml'
  ],
  telegramBot: process.env.TELEGRAM_BOT_TOKEN,
  chatId: process.env.TELEGRAM_CHAT_ID,
  openaiKey: process.env.OPENAI_API_KEY
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
function httpsRequest(url, options = {}) {
  return new Promise((resolve, reject) => {
    const req = https.request(url, options, (res) => {
      let data = '';
      res.on('data', (chunk) => data += chunk);
      res.on('end', () => {
        if (res.statusCode >= 200 && res.statusCode < 300) {
          resolve(data);
        } else {
          reject(new Error(`HTTP ${res.statusCode}: ${data}`));
        }
      });
    });
    req.on('error', reject);
    if (options.body) req.write(options.body);
    req.end();
  });
}

// –ß—Ç–µ–Ω–∏–µ RSS –ª–µ–Ω—Ç
async function fetchRSSFeeds() {
  const parser = new XMLParser({
    ignoreAttributes: false,
    attributeNamePrefix: "@_"
  });
  
  const allItems = [];
  
  for (const feedUrl of CONFIG.rssFeeds) {
    try {
      console.log(`Fetching RSS: ${feedUrl}`);
      const xmlData = await httpsRequest(feedUrl);
      const parsed = parser.parse(xmlData);
      
      let items = [];
      if (parsed.rss?.channel?.item) {
        items = Array.isArray(parsed.rss.channel.item) 
          ? parsed.rss.channel.item 
          : [parsed.rss.channel.item];
      } else if (parsed.feed?.entry) {
        items = Array.isArray(parsed.feed.entry) 
          ? parsed.feed.entry 
          : [parsed.feed.entry];
      }
      
      // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
      const normalizedItems = items.map(item => ({
        title: item.title || item.title?.['#text'] || 'No title',
        link: item.link || item.link?.['@_href'] || '',
        pubDate: item.pubDate || item.published || new Date().toISOString(),
        content: item.description || item.summary || '',
        contentSnippet: (item.description || item.summary || '').replace(/<[^>]*>/g, '').substring(0, 120),
        creator: item['dc:creator'] || item.author?.name || 'Unknown'
      }));
      
      allItems.push(...normalizedItems);
      
    } catch (error) {
      console.error(`Error fetching ${feedUrl}:`, error.message);
    }
  }
  
  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
  return allItems.sort((a, b) => new Date(b.pubDate) - new Date(a.pubDate));
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ OpenAI
async function processWithAI(newsData) {
  const prompt = `–ü—Ä–æ—Å–º–æ—Ç—Ä–∏ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ: ${JSON.stringify(newsData)}

### ROLE
–¢—ã ‚Äî –∂—É—Ä–Ω–∞–ª–∏—Å—Ç-–∞–≥—Ä–µ–≥–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∫–æ—Ä–æ—Ç–∫—É—é –ª–µ–Ω—Ç—É –¥–ª—è Telegram-–∫–∞–Ω–∞–ª–∞.

### CONTEXT
‚Ä¢ –í—Ö–æ–¥–Ω–æ–π –æ–±—ä–µ–∫—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
‚Ä¢ –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã (–Ω–æ–≤–µ–µ ‚Äî –≤—ã—à–µ)
‚Ä¢ –°–µ–≥–æ–¥–Ω—è: ${new Date().toLocaleDateString('ru-RU')}

### SELECTION RULES
1. –ò–∑ –Ω–∏—Ö –≤—ã–±–µ—Ä–∏ **–¥–æ 8 —Å–∞–º—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö** –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—é:
   ‚Ä¢ –Ω–æ–≤–∏–∑–Ω–∞ ‚Ä¢ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—å ‚Ä¢ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Ç–µ–º
   (–ù–µ –±–µ—Ä–∏ –±–æ–ª—å—à–µ 3 –∑–∞–º–µ—Ç–æ–∫ –Ω–∞ –æ–¥–Ω—É –∏ —Ç—É –∂–µ —Å—é–∂–µ—Ç–Ω—É—é –ª–∏–Ω–∏—é)

### OUTPUT FORMAT (Telegram-ready, Markdown)
‚Ä¢ \`[HH:MM]\` ‚Äî –≤—Ä–µ–º—è –∏–∑ pubDate –≤ —Ñ–æ—Ä–º–∞—Ç–µ UTC
‚Ä¢ \`SNIPPET\` ‚Äî –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (120 —Å–∏–º–≤–æ–ª–æ–≤)
‚Ä¢ –†–∞–∑–¥–µ–ª—è–π –Ω–æ–≤–æ—Å—Ç–∏ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π **–∂–∏—Ä–Ω—ã–π** –∑–∞–≥–æ–ª–æ–≤–æ–∫, –∫—É—Ä—Å–∏–≤–Ω—ã–π —Å–Ω–∏–ø–ø–µ—Ç, —á–∏—Å—Ç—É—é —Å—Å—ã–ª–∫—É
‚Ä¢ –í—Å—ë —Å–æ–æ–±—â–µ–Ω–∏–µ ‚â§ 4096 —Å–∏–º–≤–æ–ª–æ–≤

### STYLE & CONSTRAINTS
‚Ä¢ –ù–∏–∫–∞–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞, –≤—ã–≤–æ–¥–æ–≤ –∏–ª–∏ –æ—Ü–µ–Ω–æ–∫ ‚Äî —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Å—Ç–∞—Ç–∞—Ü–∏—è —Ñ–∞–∫—Ç–æ–≤
‚Ä¢ –ù–µ –∏–∑–º–µ–Ω—è–π –∑–∞–≥–æ–ª–æ–≤–æ–∫, –Ω–µ –¥–æ–±–∞–≤–ª—è–π —ç–º–æ–¥–∑–∏ –∫—Ä–æ–º–µ üóû –∏ üîó
‚Ä¢ –ù–µ –æ–±—Ä–∞—â–∞–π—Å—è –∫ —á–∏—Ç–∞—Ç–µ–ª—é –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞

### EXAMPLE
üóû [09:01] **–¢–∞—Ä–∏—Ñ—ã –∏–ª–∏ —Å–¥–µ–ª–∫–∏? –¢—Ä–∞–º–ø –¥–æ–≤–æ–ª—å—Å—Ç–≤—É–µ—Ç—Å—è –∫–∞—Ä–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ—à–ª–∏–Ω–∞–º–∏**
_–°—Ç–æ—Ä–æ–Ω–Ω–∏–∫–∏ –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–∞—é—Ç –µ–≥–æ –∫–∞–∫ —á–µ–ª–æ–≤–µ–∫–∞, —É–º–µ—é—â–µ–≥–æ –∑–∞–∫–ª—é—á–∞—Ç—å —Å–¥–µ–ª–∫–∏. –ù–æ –ø–æ–∫–∞ –±–æ–ª—å—à–µ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –ø–æ–ª—É—á–∏–ª–∏ –∂–µ—Å—Ç–∫–∏–µ —Ç–∞—Ä–∏—Ñ—ã._
üîó https://example.com/article

–ü–ï–†–ï–í–û–î–ò –í–°–ï –ù–ê –†–£–°–°–ö–ò–ô –Ø–ó–´–ö`;

  const body = JSON.stringify({
    model: "gpt-3.5-turbo",
    messages: [
      {
        role: "user", 
        content: prompt
      }
    ],
    max_tokens: 2000,
    temperature: 0.3
  });

  try {
    const response = await httpsRequest('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${CONFIG.openaiKey}`,
        'Content-Type': 'application/json',
        'Content-Length': Buffer.byteLength(body)
      },
      body: body
    });

    const data = JSON.parse(response);
    return data.choices[0].message.content;
    
  } catch (error) {
    console.error('OpenAI API Error:', error.message);
    throw error;
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
async function sendToTelegram(message) {
  const body = JSON.stringify({
    chat_id: CONFIG.chatId,
    text: message,
    parse_mode: 'Markdown'
  });

  try {
    const response = await httpsRequest(`https://api.telegram.org/bot${CONFIG.telegramBot}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Content-Length': Buffer.byteLength(body)
      },
      body: body
    });

    console.log('Message sent to Telegram successfully');
    return JSON.parse(response);
    
  } catch (error) {
    console.error('Telegram API Error:', error.message);
    throw error;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  try {
    console.log('üöÄ Starting news bot...');
    
    // 1. –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π
    console.log('üì∞ Fetching RSS feeds...');
    const newsData = await fetchRSSFeeds();
    console.log(`Found ${newsData.length} news items`);
    
    if (newsData.length === 0) {
      console.log('No news found, exiting...');
      return;
    }
    
    // 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ AI
    console.log('ü§ñ Processing with AI...');
    const processedMessage = await processWithAI(newsData.slice(0, 20)); // –ü–µ—Ä–≤—ã–µ 20 –Ω–æ–≤–æ—Å—Ç–µ–π
    
    // 3. –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
    console.log('üì± Sending to Telegram...');
    await sendToTelegram(processedMessage);
    
    console.log('‚úÖ News bot completed successfully!');
    
  } catch (error) {
    console.error('‚ùå Error in main process:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫
main();